{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":10321345,"sourceType":"datasetVersion","datasetId":6390372}],"dockerImageVersionId":30823,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import tensorflow as tf\nfrom transformers import TFBertForSequenceClassification\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.utils import resample\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport pandas as pd","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-30T10:50:19.418506Z","iopub.execute_input":"2024-12-30T10:50:19.418748Z","iopub.status.idle":"2024-12-30T10:50:32.011975Z","shell.execute_reply.started":"2024-12-30T10:50:19.418722Z","shell.execute_reply":"2024-12-30T10:50:32.011122Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# Припустимо, у вас є список категорій:\nLABEL_COLUMNS = ['toxic', 'severe_toxic', 'obscene', 'threat', 'insult', 'identity_hate']\n\n# 1. Завантажуємо модель BERT\nbert_model = TFBertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=len(LABEL_COLUMNS))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T10:50:32.013037Z","iopub.execute_input":"2024-12-30T10:50:32.013697Z","iopub.status.idle":"2024-12-30T10:50:35.867295Z","shell.execute_reply.started":"2024-12-30T10:50:32.013660Z","shell.execute_reply":"2024-12-30T10:50:35.866270Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"faa7b1f3026a4b1daaf093e6d8bcf479"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"82794c7034e4496392875648b5eb50e5"}},"metadata":{}},{"name":"stderr","text":"All PyTorch model weights were used when initializing TFBertForSequenceClassification.\n\nSome weights or buffers of the TF 2.0 model TFBertForSequenceClassification were not initialized from the PyTorch model and are newly initialized: ['classifier.weight', 'classifier.bias']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# 2. Компіляція моделі\nbert_model.compile(\n    optimizer=tf.keras.optimizers.Adam(learning_rate=5e-5),\n    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    metrics=['accuracy']\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T10:50:35.868369Z","iopub.execute_input":"2024-12-30T10:50:35.868705Z","iopub.status.idle":"2024-12-30T10:50:35.993257Z","shell.execute_reply.started":"2024-12-30T10:50:35.868673Z","shell.execute_reply":"2024-12-30T10:50:35.992459Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# 3. Завантаження токенізованих даних\n# Передбачається, що дані вже містять токенізовані вектори input_ids та attention_mask\n# Ваша таблиця повинна мати колонки 'input_ids', 'attention_masks' і мітки класів\n\ndata_path = '/kaggle/input/train-data/train_data.csv'\ndf = pd.read_csv(data_path)\n\n# Конвертація токенізованих даних з рядків у масиви\nfor column in ['input_ids', 'attention_masks']:\n    df[column] = df[column].apply(eval).apply(np.array)\n\n# Виділяємо токенізовані вектори та мітки\ninput_ids = np.stack(df['input_ids'].values)\nattention_mask = np.stack(df['attention_masks'].values)\nlabels = np.array(df[LABEL_COLUMNS].values)\n\n# Перетворюємо мітки на категорійний формат\nlabels = np.argmax(labels, axis=1)  # Якщо мітки в one-hot кодуванні","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T10:50:35.994199Z","iopub.execute_input":"2024-12-30T10:50:35.994511Z","iopub.status.idle":"2024-12-30T10:51:25.108893Z","shell.execute_reply.started":"2024-12-30T10:50:35.994481Z","shell.execute_reply":"2024-12-30T10:51:25.108196Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# 4. Балансування вибірки\nbalanced_data = []\nfor label in np.unique(labels):\n    subset = df[labels == label]\n    if len(subset) < 1000:\n        subset = resample(subset, replace=True, n_samples=1000, random_state=42)\n    balanced_data.append(subset)\n\nbalanced_df = pd.concat(balanced_data)\n\n# Оновлюємо токенізовані вектори та мітки\ninput_ids = np.stack(balanced_df['input_ids'].values)\nattention_mask = np.stack(balanced_df['attention_masks'].valu=-es)\nlabels = np.array(balanced_df[LABEL_COLUMNS].values)\nlabels = np.argmax(labels, axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T10:51:25.109595Z","iopub.execute_input":"2024-12-30T10:51:25.109828Z","iopub.status.idle":"2024-12-30T10:51:25.555893Z","shell.execute_reply.started":"2024-12-30T10:51:25.109808Z","shell.execute_reply":"2024-12-30T10:51:25.555184Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# 5. Розділення на тренувальну та тестову вибірки\ntrain_input_ids, val_input_ids, train_labels, val_labels = train_test_split(\n    input_ids, labels, test_size=0.2, random_state=42\n)\ntrain_attention_mask, val_attention_mask = train_test_split(\n    attention_mask, test_size=0.2, random_state=42\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T10:51:25.557444Z","iopub.execute_input":"2024-12-30T10:51:25.557663Z","iopub.status.idle":"2024-12-30T10:51:25.690115Z","shell.execute_reply.started":"2024-12-30T10:51:25.557643Z","shell.execute_reply":"2024-12-30T10:51:25.689423Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# 6. Тренування моделі\nhistory = bert_model.fit(\n    {'input_ids': train_input_ids, 'attention_mask': train_attention_mask},\n    train_labels,\n    validation_data=(\n        {'input_ids': val_input_ids, 'attention_mask': val_attention_mask},\n        val_labels\n    ),\n    epochs=3,\n    batch_size=32\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T10:51:25.691125Z","iopub.execute_input":"2024-12-30T10:51:25.691330Z","iopub.status.idle":"2024-12-30T12:31:27.390525Z","shell.execute_reply.started":"2024-12-30T10:51:25.691312Z","shell.execute_reply":"2024-12-30T12:31:27.389787Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/3\n4066/4066 [==============================] - 2024s 490ms/step - loss: 0.0739 - accuracy: 0.9839 - val_loss: 0.0436 - val_accuracy: 0.9887\nEpoch 2/3\n4066/4066 [==============================] - 1988s 489ms/step - loss: 0.0357 - accuracy: 0.9903 - val_loss: 0.0375 - val_accuracy: 0.9887\nEpoch 3/3\n4066/4066 [==============================] - 1989s 489ms/step - loss: 0.0212 - accuracy: 0.9944 - val_loss: 0.0262 - val_accuracy: 0.9943\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"val_predictions = bert_model.predict({'input_ids': val_input_ids, 'attention_mask': val_attention_mask})\npredicted_labels = np.argmax(val_predictions.logits, axis=1)\n\nif len(np.unique(val_labels)) != len(LABEL_COLUMNS):\n    print(f\"Попередження: кількість міток у валідаційних даних ({len(np.unique(val_labels))}) не збігається з LABEL_COLUMNS.\")\n    LABEL_COLUMNS = LABEL_COLUMNS[:len(np.unique(val_labels))]  # Автоматичне узгодження\n\nprint(\"Classification Report:\")\nprint(classification_report(val_labels, predicted_labels, target_names=LABEL_COLUMNS))\n\nprint(\"Confusion Matrix:\")\nprint(confusion_matrix(val_labels, predicted_labels))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:31:27.391282Z","iopub.execute_input":"2024-12-30T12:31:27.391569Z","iopub.status.idle":"2024-12-30T12:34:16.483374Z","shell.execute_reply.started":"2024-12-30T12:31:27.391547Z","shell.execute_reply":"2024-12-30T12:34:16.482371Z"}},"outputs":[{"name":"stdout","text":"1017/1017 [==============================] - 168s 163ms/step\nПопередження: кількість міток у валідаційних даних (5) не збігається з LABEL_COLUMNS.\nClassification Report:\n              precision    recall  f1-score   support\n\n       toxic       1.00      1.00      1.00     31766\nsevere_toxic       0.88      0.47      0.61       194\n     obscene       0.99      0.95      0.97       175\n      threat       0.86      0.80      0.83       193\n      insult       0.93      1.00      0.97       200\n\n    accuracy                           0.99     32528\n   macro avg       0.93      0.84      0.87     32528\nweighted avg       0.99      0.99      0.99     32528\n\nConfusion Matrix:\n[[31732    12     1    14     7]\n [   89    91     1    11     2]\n [    8     0   167     0     0]\n [   33     1     0   154     5]\n [    0     0     0     0   200]]\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# 7. Створення нової моделі для збереження у форматі HDF5\ninput_ids_layer = tf.keras.Input(shape=(None,), dtype=tf.int32, name='input_ids')\nattention_mask_layer = tf.keras.Input(shape=(None,), dtype=tf.int32, name='attention_mask')\n\n# Отримання виходу з BERT\nbert_outputs = bert_model.bert(input_ids=input_ids_layer, attention_mask=attention_mask_layer)\nlogits = bert_model.classifier(bert_outputs[1])  # Використання \"pooled_output\"\n\n# Створення нової функціональної моделі\nnew_model = tf.keras.Model(inputs=[input_ids_layer, attention_mask_layer], outputs=logits)\n\n# Зберігаємо нову модель у форматі HDF5\nnew_model.save(\"model-1.h5\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-30T12:51:09.630425Z","iopub.execute_input":"2024-12-30T12:51:09.630788Z","iopub.status.idle":"2024-12-30T12:51:12.309200Z","shell.execute_reply.started":"2024-12-30T12:51:09.630762Z","shell.execute_reply":"2024-12-30T12:51:12.308502Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/tf_keras/src/engine/training.py:3098: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native TF-Keras format, e.g. `model.save('my_model.keras')`.\n  saving_api.save_model(\n","output_type":"stream"}],"execution_count":10}]}